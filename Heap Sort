#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

void UpperMas(int A[], int n) {
    for (int i = 0; i < n; i++){
    A[i] = i+1;}
}
void DownMas(int A[], int n) {
    for (int i = 0; i < n; i++){
    A[i] = n - i;}
}
void RandMas(int A[], int n) {
    srand(time(NULL));
    for (int i = 0; i < n; i++){
    A[i] = rand() % 100;}
}
int CheckSum(int A[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++){
    sum += A[i];}
    printf ("Control Sum => %d\n", sum);
}
int SerSum(int A[], int n){
    int ser = 1;
    for (int i = 1; i < n; i++){
            if (A[i] < A[i-1]) ser++;
    }
    printf ("Control Ser => %d\n", ser);;
}
void PrintMas(int A[], int n){
    printf (" Massive  {");
    for (int i = 0; i < n; i++){
        printf(" %d ", A[i]);}
    printf("} \n");
}

void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int heapmake(int arr[], int n, int i, int* M, int* C, int* H) {
    (*H)++;
    int x = i;
    int L = 2 * i + 1;
    int R = 2 * i + 2;

    (*C)++;
    if (L < n && arr[L] > arr[x]) {
        x = L;
    }

    (*C)++;
    if (R < n && arr[R] > arr[x]) {
        x = R;
    }

    if (x != i) {
        (*M) += 3;
        swap(&arr[i], &arr[x]);
        heapmake(arr, n, x, M, C, H);
    }
    return *H;
}



int HeapSort(int arr[], int n, int* total_H) {
    int M = 0;
    int C = 0;
    int H = 0;

    for (int i = n / 2 - 1; i >= 0; i--) {
        heapmake(arr, n, i, &M, &C, &H);
    }

    for (int i = n - 1; i >= 0; i--) {
        M += 3;
        swap(&arr[0], &arr[i]);
        heapmake(arr, i, 0, &M, &C, &H);
    }

    *total_H = H;
    return M + C;
}

int main() {
    int count = 5; // Количество строк итоговой таблицы
    int Report = 0; // Нужно ли выводить массивы чисел

    int Tu[count], Td[count], Tr[count], Tt[count], N[count];
    int TuH[count], TdH[count], TrH[count];
    int k = 0;


    for (int j = 100; j <= count * 100; j += 100) {
        printf("\n     <<<<<+++++++++++++++   For massive %d elements    ++++++++++++++++++>>>>>> \n\n", j);
        int A[j];
        UpperMas(A, j);
        if (Report) PrintMas(A, j);
        CheckSum(A, j);
        SerSum(A, j);
        
        int total_H = 0;
        Tu[k] = HeapSort(A, j, &total_H);
        TuH[k] = total_H;
        
        printf("--------------------Sorting-------------------\n\n");
        if (Report) PrintMas(A, j);
        CheckSum(A, j);
        SerSum(A, j);
        
        N[k] = j;
        k++;
    }

    k = 0;

    for (int j = 100; j <= count * 100; j += 100) {
        printf("\n     <<<<<+++++++++++++++   For massive %d elements    ++++++++++++++++++>>>>>> \n\n", j);
        int A[j];
        DownMas(A, j);
        if (Report) PrintMas(A, j);
        CheckSum(A, j);
        SerSum(A, j);
        
        int total_H = 0;
        Td[k] = HeapSort(A, j, &total_H);
        TdH[k] = total_H;
        
        printf("--------------------Sorting-------------------\n\n");
        if (Report) PrintMas(A, j);
        CheckSum(A, j);
        SerSum(A, j);
        k++;
    }

    k = 0;

    for (int j = 100; j <= count * 100; j += 100) {
        printf("\n     <<<<<+++++++++++++++   For massive %d elements    ++++++++++++++++++>>>>>> \n\n", j);
        int A[j];
        RandMas(A, j);
        if (Report) PrintMas(A, j);
        CheckSum(A, j);
        SerSum(A, j);
        
        int total_H = 0;
        Tr[k] = HeapSort(A, j, &total_H);
        TrH[k] = total_H;

        Tt[k] = ( j * log2(j) + 6.5*j - 4 ) + ( 2 * j* log2(j) + j + 2 );
        
        printf("--------------------Sorting-------------------\n\n");
        if (Report) PrintMas(A, j);
        CheckSum(A, j);
        SerSum(A, j);
        k++;
    }

    printf("\n\x1b[1;33m  +--------------------------------------------------------------------+\x1b[0m\n");
    printf("  \x1b[1;33m|   <<<<<  *** Подсчёт трудоёмкости построения пирамиды ***  >>>>>   |\x1b[0m\n");
    printf("\x1b[1;33m  +--------------------------------------------------------------------+\x1b[0m\n");

    printf("\n");
    printf("         __________________________________________________\n");
    printf("        |     |                 M+C (fact)                 |\n");
    printf("        |  N  |____________________________________________|\n");
    printf("        |     |    Down           Upper           Rand     |\n");
    printf("        |_____|____________________________________________|\n");
    for (int i = 0; i < count; i++) {
        printf("        | %-4d| %-13d   %-13d   %-10d | \n", 
               N[i],TdH[i], TuH[i], TrH[i]);
        printf("        |_____|____________________________________________|\n");
    }


    printf("\n\x1b[1;33m  +--------------------------------------------------------------------+\x1b[0m\n");
    printf("  \x1b[1;33m|        <<<<<  *** Подсчёт трудоёмкости Heap Sort ***  >>>>>        |\x1b[0m\n");
    printf("\x1b[1;33m  +--------------------------------------------------------------------+\x1b[0m\n");


    printf("\n\n");
    printf(" ___________________________________________________________________\n");
    printf("|     |                |                 M+C (fact)                 |\n");
    printf("|  N  |       M+C      |____________________________________________|\n");
    printf("|     |      theor     |    Down           Upper           Rand     |\n");
    printf("|_____|________________|____________________________________________|\n");
    for (int i = 0; i < count; i++) {
        printf("| %-4d| %-14d | %-13d   %-13d   %-10d | \n", 
               N[i], Tt[i], Td[i], Tu[i], Tr[i]);
        printf("|_____|________________|____________________________________________|\n");
    }

    return 0;
}
